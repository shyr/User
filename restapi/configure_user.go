// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"database/sql"
	"fmt"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	_ "github.com/go-sql-driver/mysql"
	graceful "github.com/tylerb/graceful"

	"github.com/yundream/User/models"
	"github.com/yundream/User/restapi/operations"
	"github.com/yundream/User/restapi/operations/user"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name User --spec ../swagger.yml

func configureFlags(api *operations.UserAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

type UserInfoError struct {
	Body models.Error `json:"body"`
}

func (u *UserInfoError) WriteResponse(w http.ResponseWriter, producer runtime.Producer) {
	producer.Produce(w, u.Body)
}

type UserInfoOK struct {
	Body models.User `json:"body"`
}

func (u *UserInfoOK) WriteResponse(w http.ResponseWriter, producer runtime.Producer) {
	producer.Produce(w, u.Body)
}

func configureAPI(api *operations.UserAPI) http.Handler {
	fmt.Println("Handler config")
	db, err := sql.Open("mysql", "root:gkwlak@unix(/var/run/mysqld/mysqld.sock)/userInfo")
	if err != nil {
		panic(err)
	}
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.UserGetSearchHandler = user.GetSearchHandlerFunc(func(params user.GetSearchParams) middleware.Responder {
		var (
			name    string
			email   string
			address string
		)
		_ = db.QueryRow("SELECT name, email, address FROM user WHERE id=?", *params.Body.UserID).
			Scan(&name, &email, &address)
		info := models.User{Address: address,
			Email:  email,
			Name:   name,
			UserID: params.Body.UserID}
		return &UserInfoOK{Body: info}
	})

	api.UserGetUserIDHandler = user.GetUserIDHandlerFunc(func(params user.GetUserIDParams) middleware.Responder {
		var (
			name    string
			email   string
			address string
		)
		_ = db.QueryRow("SELECT name, email, address FROM user WHERE id=?", params.ID).
			Scan(&name, &email, &address)
		info := models.User{Address: address,
			Email:  email,
			Name:   name,
			UserID: &params.ID}
		return &UserInfoOK{Body: info}
	})
	api.UserPostUserHandler = user.PostUserHandlerFunc(func(params user.PostUserParams) middleware.Responder {
		_, err := db.Exec("INSERT INTO user SET name=?, email=?, address=?, id=?",
			params.Body.Name,
			params.Body.Email,
			params.Body.Address,
			params.Body.UserID)
		if err != nil {
			return &UserInfoError{Body: models.Error{Code: 500, Message: err.Error()}}
		}
		return &UserInfoOK{Body: *params.Body}
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
